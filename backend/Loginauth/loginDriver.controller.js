/**
 * @swagger
 * tags:
 *   name: Authentication
 *   description: API for handling driver login and registration
 */

/**
 * @swagger
 * /authentication/driver/login:
 *   post:
 *     summary: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (Driver)
 *     tags:
 *       - Authentication
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 example: driver01
 *               password:
 *                 type: string
 *                 example: 123456
 *     responses:
 *       200:
 *         description: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
 *                 user:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       example: 1
 *                     username:
 *                       type: string
 *                       example: "driver01"
 *                     role:
 *                       type: string
 *                       example: "driver"
 *                     storeId:
 *                       type: integer
 *                       nullable: true
 *                       example: 101
 *                     isApproved:
 *                       type: boolean
 *                       example: true
 *                     hasJoinRequest:
 *                       type: boolean
 *                       example: true
 *       400:
 *         description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
 *       401:
 *         description: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 *       500:
 *         description: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
 */

/**
 * @swagger
 * /authentication/driver/register:
 *   post:
 *     summary: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
 *     tags:
 *       - Authentication
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 example: driver01
 *               password:
 *                 type: string
 *                 example: 123456
 *               birthdate:
 *                 type: string
 *                 format: date
 *                 example: "2000-01-01"
 *               phone:
 *                 type: string
 *                 example: "0812345678"
 *               licenseImage:
 *                 type: string
 *                 format: binary
 *               profileImage:
 *                 type: string
 *                 format: binary
 *     responses:
 *       201:
 *         description: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
 *       400:
 *         description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 *       500:
 *         description: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å server
 */


const pool = require("../db");
const jwt = require("jsonwebtoken");
const path = require("path");
const fs = require("fs");

//----------------------Login Driver-------------------------
exports.loginDriver = async (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }

  try {
    const [rows] = await pool.query(
      "SELECT * FROM Account_Info WHERE username = ? AND `Password` = ?",
      [username, password]
    );

    if (rows.length === 0) {
      return res.status(401).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const user = rows[0];
    let storeId = null;
    let isApproved = false;
    let hasJoinRequest = false;

    if (user.role === "manager") {
      const [[shop]] = await pool.query(
        `SELECT Shop_ID FROM Shop_Info WHERE ShopManagerID = ?`,
        [user.Account_ID]
      );
      if (shop) storeId = shop.Shop_ID;
    }

    if (user.role === "driver") {
      const [results] = await pool.query(
        `SELECT Shop_ID, Is_Approved FROM Driver_info WHERE Driver_Name = ?`,
        [username]
      );

      if (results.length > 0) {
        const joined = results[0];
        storeId = joined.Shop_ID;
        isApproved = joined.Is_Approved === "approved";
        hasJoinRequest = true;
      }
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
    req.session.user = {
      id: user.Account_ID,
      username: user.username,
      role: user.role,
      storeId,
      isApproved,
      hasJoinRequest
    };

    res.json({
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: req.session.user
    });

  } catch (err) {
    console.error("‚ùå login error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// ----------------------register Driver-------------------
exports.registerDriver = async (req, res) => {
  const { username, password, birthdate, phone } = req.body;
  const licenseImage = req.files?.licenseImage?.[0];
  const profileImage = req.files?.profileImage?.[0];

  if (!username || !password || !birthdate || !licenseImage || !phone) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
  }

  try {
    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
    const [exists] = await pool.query(
      "SELECT * FROM Account_Info WHERE username = ?",
      [username]
    );
    if (exists.length > 0) {
      return res.status(400).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // üßë‚Äçü¶± ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let profilePath = null;
    if (profileImage) {
      const profileName = `profile_${Date.now()}.png`;
      const profileFullPath = path.join(__dirname, "../uploads/", profileName);
      fs.writeFileSync(profileFullPath, profileImage.buffer);
      profilePath = `/uploads/${profileName}`;
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Account_Info
    const [accountResult] = await pool.query(
      `INSERT INTO Account_Info 
       (username, Phone_Number, Password, Birthday, role, Profile_Img) 
       VALUES (?, ?, ?, ?, 'driver', ?)`,
      [username, phone, password, birthdate, profilePath]
    );

    const accountId = accountResult.insertId;

    // üìÅ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà
    const licenseName = `license_${accountId}_${Date.now()}.png`;
    const licensePath = path.join(__dirname, "../uploads/", licenseName);
    fs.writeFileSync(licensePath, licenseImage.buffer);

   

    res.status(201).json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å server" });
  }
};