/**
 * @swagger
 * /store:
 *   post:
 *     summary: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
 *     description: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PromptPay ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
 *     tags:
 *       - Store
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - address
 *               - phone
 *               - password
 *               - managerName
 *               - info
 *               - service
 *             properties:
 *               name:
 *                 type: string
 *                 example: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á"
 *               address:
 *                 type: string
 *                 example: "123/4 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏ó‡∏°."
 *               phone:
 *                 type: string
 *                 example: "0812345678"
 *               password:
 *                 type: string
 *                 example: "shop1234"
 *               managerName:
 *                 type: string
 *                 example: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢"
 *               info:
 *                 type: string
 *                 example: "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏°‡πÇ‡∏Æ‡∏°‡πÄ‡∏°‡∏î"
 *               service:
 *                 type: string
 *                 example: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° ‡∏Ç‡∏ô‡∏° ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á"
 *               vehicles:
 *                 type: string
 *                 description: JSON string ‡πÄ‡∏ä‡πà‡∏ô `[{"model":"Toyota","license":"1234"}]`
 *               promptpay:
 *                 type: string
 *                 format: binary
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *     responses:
 *       201:
 *         description: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
 *       500:
 *         description: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 */

/**
 * @swagger
 * /store/me:
 *   get:
 *     summary: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
 *     description: ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
 *     tags:
 *       - Store
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 Shop_ID:
 *                   type: integer
 *                 Shop_Name:
 *                   type: string
 *                 Shop_Location:
 *                   type: string
 *                 Shop_Phone:
 *                   type: string
 *                 Shop_Manager_Name:
 *                   type: string
 *                 Shop_Info:
 *                   type: string
 *                 Shop_Service:
 *                   type: string
 *                 ShopImages:
 *                   type: array
 *                   items:
 *                     type: string
 *                 ShopQRCode:
 *                   type: string
 *                 Shop_Status:
 *                   type: string
 *                   enum: [open, closed]
 *       404:
 *         description: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô
 *       500:
 *         description: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å server
 */

/**
 * @swagger
 * /store/toggle-status:
 *   patch:
 *     summary: ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î / ‡∏õ‡∏¥‡∏î)
 *     description: ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
 *     tags:
 *       - Store
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô closed ‡πÅ‡∏•‡πâ‡∏ß"
 *       404:
 *         description: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
 *       500:
 *         description: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 */




const path = require("path");
const fs = require("fs");
const pool = require("../db");

// ---------------------‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô-------------------------
exports.createStore = async (req, res) => {
  const {
    name,
    address,
    phone,
    password,
    managerName,
    info,
    service,
    lat,
    lng
  } = req.body;
  

  const managerId = req.userId;
  const promptpayFile = req.files?.promptpay?.[0];
  const images = req.files?.images || [];

  try {
    // üîΩ ‡πÄ‡∏ã‡∏ü promptpay ‡∏•‡∏á disk
    let promptpayPath = null;
    if (promptpayFile) {
      const promptpayName = `promptpay_${Date.now()}.png`;
      const promptpayFullPath = path.join(
        __dirname,
        "../uploads/",
        promptpayName
      );
      fs.writeFileSync(promptpayFullPath, promptpayFile.buffer);
      promptpayPath = `/uploads/${promptpayName}`;
    }

    // üîΩ ‡πÄ‡∏ã‡∏ü‡∏£‡∏π‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
    const imagePaths = [];
    for (const file of images) {
      const imgName = `shop_${Date.now()}_${file.originalname}`;
      const fullPath = path.join(__dirname, "../uploads/", imgName);
      fs.writeFileSync(fullPath, file.buffer);
      imagePaths.push(`/uploads/${imgName}`);
    }

    // üîΩ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Shop_Info
    const [insertResult] = await pool.query(
      `INSERT INTO Shop_Info 
        (Shop_Name, Shop_Location, Shop_Phone, Shop_Password, Shop_Manager_Name, Shop_Info, Shop_Service, ShopImages, ShopQRCode, ShopManagerID, Shop_Status, Shop_Lat, Shop_Lng)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'open', ?, ?)`,
    
      [
        name,
        address,
        phone,
        password,
        managerName,
        info,
        service,
        JSON.stringify(imagePaths), // ‚úÖ ‡πÄ‡∏ã‡∏ü‡πÄ‡∏õ‡πá‡∏ô string JSON
        promptpayPath,
        managerId,
        parseFloat(lat),
        parseFloat(lng)
      ]
    );

    const newShopId = insertResult.insertId;

    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡πÄ‡∏õ‡πá‡∏ô manager
    await pool.query(
      `UPDATE Account_Info SET role = 'manager' WHERE Account_ID = ?`,
      [managerId]
    );
    
    // üîΩ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend
    if (req.body.vehicles) {
      const vehicles = JSON.parse(req.body.vehicles);
      for (const v of vehicles) {
        await pool.query(
          `INSERT INTO ShopVehicles (Shop_ID, Car_Model, License_Plate) VALUES (?, ?, ?)`,
          [newShopId, v.model, v.license]
        );
      }
    }

    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Error creating store:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

//-----------------------‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô----------------------
exports.getMyStore = async (req, res) => {
  const id = req.userId;
  const { username } = req;

  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á role ‡∏™‡∏î ‡πÜ ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [[account]] = await pool.query(
      `SELECT role FROM Account_Info WHERE Account_ID = ?`,
      [id]
    );
    const role = account?.role;

    console.log("üì¶ ROLE:", role, "üë§ ID:", id, "üßë‚Äçüöí Username:", username);

    let store = null;

    if (role === "manager") {
      const [[shop]] = await pool.query(
        `SELECT * FROM Shop_Info WHERE ShopManagerID = ?`,
        [id]
      );
      store = shop;
    } else if (role === "driver") {
      const [[joined]] = await pool.query(
        `SELECT s.* FROM Driver_info d
         JOIN Shop_Info s ON d.Shop_ID = s.Shop_ID
         WHERE d.Driver_Name = ? AND d.Is_Approved = 'approved'`,
        [username]
      );
      store = joined;
    }

    if (!store) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" });

    if (typeof store.ShopImages === "string") {
      try {
        store.ShopImages = JSON.parse(store.ShopImages);
      } catch (e) {
        store.ShopImages = [];
      }
    }

    res.json(store);
  } catch (err) {
    console.error("‚ùå getMyStore error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å server" });
  }
};

// ---------------------‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô-------------------------
exports.toggleStoreStatus = async (req, res) => {
  console.log("üì¶ toggleStoreStatus ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å");
  const managerId = req.userId;

  try {
    const [[shop]] = await pool.query(
      `SELECT Shop_ID, Shop_Status FROM Shop_Info WHERE ShopManagerID = ?`,
      [managerId]
    );

    if (!shop) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" });

    const newStatus = shop.Shop_Status === "open" ? "closed" : "open";

    await pool.query(`UPDATE Shop_Info SET Shop_Status = ? WHERE Shop_ID = ?`, [
      newStatus,
      shop.Shop_ID,
    ]);

    res.json({ message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß` });
  } catch (err) {
    console.error("‚ùå toggleStoreStatus error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};
