/**
 * @swagger
 * /api/shops/nearby/{orderId}:
 *   get:
 *     summary: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 *     tags:
 *       - User
 *     parameters:
 *       - name: orderId
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *         description: ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
 *     responses:
 *       200:
 *         description: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 *                 stores:
 *                   type: array
 *                   description: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                         description: ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       lat:
 *                         type: number
 *                         format: float
 *                         description: ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       lng:
 *                         type: number
 *                         format: float
 *                         description: ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       shop_info:
 *                         type: string
 *                         description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       shop_phone:
 *                         type: string
 *                         description: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       shop_service:
 *                         type: string
 *                         description: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ
 *                       total_price:
 *                         type: number
 *                         description: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
 *                       equipment:
 *                         type: string
 *                         description: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏´‡∏≤
 *                       Driver_ID:
 *                         type: string
 *                         description: ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
 *                       driver_name:
 *                         type: string
 *                         description: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 *                       driver_year:
 *                         type: number
 *                         description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 *                       rating:
 *                         type: number
 *                         description: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 *                       offerStatus:
 *                         type: string
 *                         description: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô "‡∏ï‡∏Å‡∏•‡∏á" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö)
 *       400:
 *         description: ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
 *       404:
 *         description: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 *       500:
 *         description: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
 */


const pool = require("../db/index");
const dotenv = require("dotenv");
dotenv.config();

exports.NearbyShops = async (req, res) => {
  console.log("üì• Request received with orderId:", req.params.orderId);
  const { orderId } = req.params;

  try {
    // 1. ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    const [orderRows] = await pool.execute(
      "SELECT Start_Lat, Start_Lng FROM OrderDetail WHERE OrderDetail_ID = ?",
      [orderId]
    );
    if (orderRows.length === 0) {
      return res.status(404).json({ error: "Order not found" });
    }

    const Start_Lat = parseFloat(orderRows[0].Start_Lat);
    const Start_Lng = parseFloat(orderRows[0].Start_Lng);

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° Offer_Status
    const [Shops] = await pool.execute(`
      SELECT 
        d.Driver_ID,
        s.Shop_ID,
        s.Shop_Name,
        s.Shop_Lat,
        s.Shop_Phone,
        s.Shop_Lng,
        s.Shop_Info,
        s.Shop_service,
        o.Total_Price,
        o.Equipment,
        o.Offer_Status,
        d.Driver_Year,
        d.Driver_Name,
        d.DriverRating
      FROM Driver_info d
      LEFT JOIN Driver_Offer o ON d.Driver_ID = o.Driver_ID AND o.OrderDetail_ID = ?
      LEFT JOIN Shop_Info s ON d.Shop_ID = s.Shop_ID
    `, [orderId]);

    // 3. ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ 3 ‡∏Å‡∏°.
    const nearbyShop = Shops.filter((shop) => {
      if (!shop.Shop_Lat || !shop.Shop_Lng) return false;
      const distance = calculateDistance(
        Start_Lat, Start_Lng,
        parseFloat(shop.Shop_Lat),
        parseFloat(shop.Shop_Lng)
      );
      return distance <= 10;
    });

    // 4. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà "‡∏ï‡∏Å‡∏•‡∏á"
    const acceptedShops = nearbyShop.filter(shop => shop.Offer_Status === "‡∏ï‡∏Å‡∏•‡∏á");

    // 5. ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    res.status(200).json({
      message: "Nearby accepted shops found",
      stores: acceptedShops.map(shop => ({
        name: shop.Shop_Name,
        lat: shop.Shop_Lat,
        lng: shop.Shop_Lng,
        shop_info: shop.Shop_Info,
        shop_phone: shop.Shop_Phone,
        shop_service: shop.Shop_service,
        total_price: shop.Total_Price,
        equipment: shop.Equipment,
        Driver_ID: shop.Driver_ID,
        driver_name: shop.Driver_Name,
        driver_year: shop.Driver_Year,
        rating: shop.DriverRating,
        offerStatus: shop.Offer_Status
      }))
    });

  } catch (err) {
    console.error("‚ùå Error fetching nearby drivers:", err);
    res.status(500).json({ message: "Database error", error: err });
  }
};
