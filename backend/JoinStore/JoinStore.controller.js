// paths:
//   /store/search:
//     post:
//       summary: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
//       tags:
//         - Store
//       requestBody:
//         required: true
//         content:
//           application/json:
//             schema:
//               type: object
//               properties:
//                 storeName:
//                   type: string
//                   example: "Coffee Hub"
//                 storeCode:
//                   type: string
//                   example: "secret123"
//       responses:
//         200:
//           description: ‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ
//           content:
//             application/json:
//               schema:
//                 type: object
//                 properties:
//                   shopId:
//                     type: integer
//                   shopName:
//                     type: string
//         404:
//           description: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î
//         500:
//           description: Server error

//   /store/join:
//     post:
//       summary: ‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
//       tags:
//         - Store
//       requestBody:
//         required: true
//         content:
//           application/json:
//             schema:
//               type: object
//               properties:
//                 shopId:
//                   type: integer
//                   example: 1
//       responses:
//         200:
//           description: ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//         400:
//           description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
//         500:
//           description: Server error

//   /store/join/status:
//     get:
//       summary: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
//       tags:
//         - Store
//       responses:
//         200:
//           description: ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
//           content:
//             application/json:
//               schema:
//                 type: object
//                 properties:
//                   approved:
//                     type: string
//                     enum: [pending, approved, rejected]
//         404:
//           description: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô
//         500:
//           description: Server error

//   /store/join/requests:
//     get:
//       summary: ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏π‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
//       tags:
//         - Store
//       responses:
//         200:
//           description: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
//           content:
//             application/json:
//               schema:
//                 type: array
//                 items:
//                   type: object
//                   properties:
//                     Driver_ID:
//                       type: integer
//                     Driver_Name:
//                       type: string
//         404:
//           description: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
//         500:
//           description: Server error

//   /store/join/approve:
//     put:
//       summary: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô
//       tags:
//         - Store
//       requestBody:
//         required: true
//         content:
//           application/json:
//             schema:
//               type: object
//               properties:
//                 driverId:
//                   type: integer
//                   example: 3
//                 approved:
//                   type: boolean
//                   example: true
//       responses:
//         200:
//           description: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//         500:
//           description: Server error
// 


const pool = require("../db");

// üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
exports.searchStore = async (req, res) => {
  const { storeName, storeCode } = req.body;

  const [rows] = await pool.query(
    "SELECT * FROM Shop_Info WHERE Shop_Name = ? AND Shop_Password = ?",
    [storeName, storeCode]
  );

  if (rows.length === 0) {
    return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î" });
  }

  res.status(200).json({
    shopId: rows[0].Shop_ID,
    shopName: rows[0].Shop_Name,
  });
};

// üôã‚Äç‚ôÇÔ∏è ‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô
exports.requestJoinStore = async (req, res) => {
  const { shopId } = req.body;
  const username = req.username;

  console.log("üì¶ Body:", req.body);
  console.log("üë§ Username:", username);

  if (!shopId || !username) {
    return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  }

  try {
    const [exists] = await pool.query(
      "SELECT * FROM Driver_info WHERE Driver_Name = ?",
      [username]
    );

    if (exists.length > 0) {
      return res
        .status(400)
        .json({ message: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‚úÖ INSERT ‡πÉ‡∏ä‡πâ Shop_ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    await pool.query(
      "INSERT INTO Driver_info (Driver_Name, Shop_ID, Is_Approved) VALUES (?, ?, 'pending')",
      [username, shopId]
    );

    res.status(200).json({ message: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Error joining store:", err.message);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å server" });
  }
};

// üîÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
exports.checkJoinStatus = async (req, res) => {
  const username = req.username;

  const [rows] = await pool.query(
    "SELECT * FROM Driver_info WHERE Driver_Name = ?",
    [username]
  );

  if (rows.length === 0) {
    return res.status(404).json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô" });
  }

  res.status(200).json({ approved: rows[0].Is_Approved });
};

// üì• ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏π‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getJoinRequests = async (req, res) => {
  const userId = req.userId;

  try {
    // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏£‡∏á: ShopManagerID
    const [[shop]] = await pool.query(
      "SELECT Shop_ID FROM Shop_Info WHERE ShopManagerID = ?",
      [userId]
    );

    if (!shop) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" });

    // ‚úÖ WHERE ‡πÉ‡∏ä‡πâ Shop_ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const [drivers] = await pool.query(
      `SELECT Driver_ID, Driver_Name
       FROM Driver_info
       WHERE Shop_ID = ? AND Is_Approved = 'pending'`,
      [shop.Shop_ID]
    );

    res.json(drivers);
  } catch (err) {
    console.error("getJoinRequests error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‚úÖ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠
exports.approveJoinRequest = async (req, res) => {
  const { driverId, approved } = req.body;
  const newStatus = approved ? "approved" : "rejected";

  try {
    await pool.query(
      "UPDATE Driver_info SET Is_Approved = ? WHERE Driver_ID = ?",
      [newStatus, driverId]
    );

    res.json({ message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
  } catch (err) {
    console.error("approveJoinRequest error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};
